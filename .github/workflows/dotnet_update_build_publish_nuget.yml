name: Build and publish dotnet nuget to org registry

on:
  workflow_call:
    inputs:
      file_with_version:
        required: false
        type: string
      dot_net_version:
        required: true
        type: string
      csproj_path:
        required: true
        type: string
      build_file:
        required: true
        type: string
      package_name:
        required: true
        type: string
      branch:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  Get_version:
    uses: ./.github/workflows/get_version.yml
    with:
      branch: ${{ inputs.branch }}
    secrets:
      token: ${{ secrets.token }}

  Build_and_publish:
    needs: Get_version
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}
          ref: ${{ inputs.branch }}

      - name: Update .NET file version
        uses: vers-one/dotnet-project-version-updater@v1.6
        with:
          file: "${{ inputs.file_with_version || 'Directory.Build.props' }}"
          version: ${{ needs.Get_version.outputs.new_version }}

      - name: Setup .NET ${{ inputs.dot_net_version }}.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ inputs.dot_net_version }}.x"

      - name: Package the project
        run: |
          dotnet pack ${{ inputs.csproj_path }}/${{ inputs.build_file }} -p:PackageID=${{ inputs.package_name }} -p:Version=${{ needs.Get_version.outputs.new_version }} --configuration Release

      - name: Create new tag
        if: inputs.branch != 'main' && inputs.branch != 'master'
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"
          force_push_tag: true

      - name: Create a GitHub release
        if: inputs.branch == 'main' || inputs.branch == 'master'
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"

      - name: Publish the package
        run: |
          dotnet nuget push "${{ inputs.csproj_path }}/bin/Release/${{ inputs.package_name }}.${{ needs.Get_version.outputs.new_version }}.nupkg"  --api-key ${{ secrets.token }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}"
