name: Reusable workflow for updating production version

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      package_json_paths:
        type: string
        required: false
      dot_net_file_path:
        type: string
        required: false
    secrets:
      ci_token:
        required: true
    outputs:
      new_version_number:
        description: "New version number"
        value: ${{ jobs.Get_version.outputs.new_version }}

jobs:
  Get_version:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/get_version_number.yml
    secrets:
      token: ${{ secrets.ci_token }}

  Update_version_in_code:
    needs: Get_version
    runs-on: ubuntu-latest
    if: needs.Get_version.outputs.new_version != '' && needs.Get_version.outputs.new_v-version != ''
    steps:
      # - uses: actions/create-github-app-token@v1
      #   id: app-token
      #   with:
      #     app-id: ${{ vars.WORKFLOW_BOT_ID }}
      #     private-key: ${{ secrets.workflow_bot_token }}

      # - name: Checkout code
      #   uses: actions/checkout@v4
      #   with:
      #     token: ${{ steps.app-token.outputs.token }}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ci_token }}
          ref: ${{ github.base_ref }}
  
      - name: Update package.json versions
        if: inputs.package_json_paths != ''
        run: |
          IFS=',' read -ra ADDR <<< "${{ inputs.package_json_paths }}"
          for folder in "${ADDR[@]}"; do
            jq ".version=\"${{ needs.Get_version.outputs.new_version }}\"" $folder/package.json > $folder/temp.json && mv $folder/temp.json $folder/package.json
          done

      - name: Update .net file version
        if: inputs.dot_net_file_path != ''
        id: update
        uses: vers-one/dotnet-project-version-updater@v1.6
        with:
          file: "${{ inputs.dot_net_file_path }}"
          version: ${{ needs.Get_version.outputs.new_version }}

      - name: Add and commit change
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Changed application version to ${{ needs.Get_version.outputs.new_v-version }}" -a

      - name: Push commit to a protected branch
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.ci_token }}
          branch: ${{ github.base_ref }}
          unprotect_reviews: true
          tags: true

      # - name: Commit changes
      #   uses: EndBug/add-and-commit@v9
      #   with:
      #     message: "Changed application version in package.json to ${{ needs.Get_version.outputs.new_prod_version }}"
      #     committer_name: Nittin GitHub Actions
      #     committer_email: actions@nittin.cz
      #     tag: ${{ needs.Get_version.outputs.new_prod_version }}
      #     github_token: ${{ steps.app-token.outputs.token }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ needs.Get_version.outputs.new_v-version }}"
          makeLatest: ${{ github.base_ref == github.event.repository.default_branch }}
