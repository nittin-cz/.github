name: Deploy application to server

on:
  workflow_call:
    inputs:
      host:
        type: string
        required: true
      scp_files:
        type: string
        required: false
      registry:
        required: true
        type: string
      image:
        required: false
        type: string
    secrets:
      token:
        required: true
      key:
        required: true
      passphrase:
        required: true
      env_file:
        required: true
      username:
        required: true
      docker_compose_file_location:
        required: true

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}

      - id: repo_name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.event.repository.name }}

      - id: username
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.actor }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ inputs.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: copy docker compose file to server
        if: inputs.scp_files != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ inputs.host }}
          username: ${{ secrets.username }}
          key: ${{ secrets.key }}
          passphrase: ${{ secrets.passphrase }}
          port: 22
          source: ${{ inputs.scp_files }}
          target: ${{ secrets.docker_compose_file_location }}
          overwrite: true

      - name: SSH connect to server and run docker image
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ inputs.host }}
          username: ${{ secrets.username }}
          key: ${{ secrets.key }}
          passphrase: ${{ secrets.passphrase }}
          script: |
            # login to github registry
            echo ${{ secrets.token }} | docker login ${{ env.REGISTRY }} -u ${{ github.repository_owner }} --password-stdin

            # pull latest image
            docker pull ${{ steps.meta.outputs.tags }}

            # create .env file
            [ ! -d "~/envs/${{ steps.repo_name.outputs.lowercase }}" ] && mkdir -p ~/envs/${{ steps.repo_name.outputs.lowercase }}
            echo "${{ secrets.env_file }}" > ~/envs/${{ steps.repo_name.outputs.lowercase }}/.env

            # go to docker compose directory
            cd ${{ secrets.docker_compose_file_location }}/

            # run image
            export IMAGE="${{ inputs.image || steps.meta.outputs.tags }}"
            export USERNAME="${{ secrets.username }}"
            export REPO_NAME="${{ steps.repo_name.outputs.lowercase }}"
            
            docker compose up -d

            # remove old images
            DOCKER_IDS=$(docker images | awk '/<none>/ { print $3 }')
            if [ ! -z "$DOCKER_IDS" ]; then
              echo "$DOCKER_IDS" | xargs docker rmi
            fi
            unset DOCKER_IDS
