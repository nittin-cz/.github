name: Update version, build and push docker image to org registry

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      package_json_paths:
        type: string
        required: false
      dotnet_version_file_path:
        type: string
        required: false
      dockerfile_path:
        required: true
        type: string
      flags:
        required: false
        type: string
      branch:
        required: true
        type: string
      artifact_name:
        required: false
        type: string
    secrets:
      token:
        required: true

env:
  REGISTRY: ghcr.io

jobs:
  Get_version:
    uses: ./.github/workflows/get_version.yml
    with:
      branch: ${{ inputs.branch }}
    secrets:
      token: ${{ secrets.token }}

  Build_and_push:
    needs: Get_version
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}
          ref: ${{ inputs.branch }}

      - name: Update package.json versions
        if: inputs.package_json_paths != ''
        run: |
          IFS=',' read -ra ADDR <<< "${{ inputs.package_json_paths }}"
          for folder in "${ADDR[@]}"; do
            echo "Updating package.json in $folder"
            jq ".version=\"${{ needs.Get_version.outputs.new_version }}\"" $folder/package.json > $folder/temp.json && mv $folder/temp.json $folder/package.json
          done

      - name: Update .NET file version
        if: inputs.dotnet_version_file_path
        uses: vers-one/dotnet-project-version-updater@v1.6
        with:
          file: "${{ inputs.dotnet_version_file_path }}"
          version: ${{ needs.Get_version.outputs.new_version }}

      - name: Create new tag
        if: inputs.branch != 'main' && inputs.branch != 'master'
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"
          force_push_tag: true

      - name: Create a GitHub release
        if: (inputs.branch == 'main' || inputs.branch == 'master') && !inputs.skip_release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - id: repo_name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.event.repository.name }}

      - name: Build and push docker image with build arg
        run: |
          docker buildx build --push -t ${{ steps.meta.outputs.tags }} --cache-to type=inline --cache-from type=registry,ref=${{ steps.meta.outputs.tags }} ${{ inputs.flags }} ${{ inputs.dockerfile_path }}
