name: Create new artifact with updated version

on:
  workflow_call:
    inputs:
      package_json_paths:
        type: string
        required: false
      dotnet_version_file_path:
        type: string
        required: false
      branch:
        type: string
        required: true
      skip_release:
        type: boolean
        required: false
      artifact_name:
        type: string
        required: false
    secrets:
      token:
        required: true
    outputs:
      new_version:
        description: "New version"
        value: ${{ jobs.Get_version.outputs.new_version }}

jobs:
  Get_version:
    uses: ./.github/workflows/get_version.yml
    with:
      branch: ${{ inputs.branch }}
    secrets:
      token: ${{ secrets.token }}

  Update_and_release:
    needs: Get_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}
          ref: ${{ inputs.branch }}

      - name: Update package.json versions
        if: inputs.package_json_paths != ''
        run: |
          IFS=',' read -ra ADDR <<< "${{ inputs.package_json_paths }}"
          for folder in "${ADDR[@]}"; do
            echo "Updating package.json in $folder"
            jq ".version=\"${{ needs.Get_version.outputs.new_version }}\"" $folder/package.json > $folder/temp.json && mv $folder/temp.json $folder/package.json
          done

      - name: Update .NET file version
        if: inputs.dotnet_version_file_path
        uses: vers-one/dotnet-project-version-updater@v1.6
        with:
          file: "${{ inputs.dotnet_version_file_path }}"
          version: ${{ needs.Get_version.outputs.new_version }}

      - name: Create new tag
        if: inputs.branch != 'main' && inputs.branch != 'master'
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"
          force_push_tag: true

      - name: Create a GitHub release
        if: (inputs.branch == 'main' || inputs.branch == 'master') && !inputs.skip_release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"

      # - name: Upload only updated artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: "${{ inputs.artifact_name }}-${{ hashFiles('**/*.csproj', '**/*.lock', '**/**/package-lock.json' ) }}-updated"
      #     path: "*"
