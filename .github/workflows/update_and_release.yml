name: Release new production version

on:
  workflow_call:
    inputs:
      package_json_paths:
        type: string
        required: false
      dot_net_file_path:
        type: string
        required: false
      branch:
        type: string
        required: true
    secrets:
      token:
        required: true

jobs:
  Get_version:
    uses: ./.github/workflows/get_version.yml
    with:
      branch: ${{ inputs.branch }}
    secrets:
      token: ${{ secrets.token }}

  Update_and_release:
    needs: Get_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}
          ref: ${{ inputs.branch }}

      - name: Update package.json versions
        if: inputs.package_json_paths != ''
        run: |
          IFS=',' read -ra ADDR <<< "${{ inputs.package_json_paths }}"
          for folder in "${ADDR[@]}"; do
            echo "Updating package.json in $folder"
            jq ".version=\"${{ needs.Get_version.outputs.new_version }}\"" $folder/package.json > $folder/temp.json && mv $folder/temp.json $folder/package.json
            echo $folder/package.json >> updated_files.txt
          done
          echo "package.json" >> updated_files.txt

      - name: Update .NET file version
        if: inputs.dot_net_file_path != ''
        uses: vers-one/dotnet-project-version-updater@v1.6
        with:
          file: "${{ inputs.dot_net_file_path }}"
          version: ${{ needs.Get_version.outputs.new_version }}

      - name: save changes of fpdated .NET file version
        if: inputs.dot_net_file_path != ''
        run: |
          echo "${{ inputs.dot_net_file_path }}" >> updated_files.txt

      - name: Create new tag
        if: inputs.branch != 'main' && inputs.branch != 'master'
        uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"

      - name: Create a GitHub release
        if: inputs.branch == 'main' || inputs.branch == 'master'
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ needs.Get_version.outputs.new_version }}"

      - name: Prepare updated files for upload
        run: |
          UPDATED_PATHS=$(cat updated_files.txt)
          echo "updated_files=${UPDATED_PATHS}" >> $GITHUB_ENV

      - name: Upload only updated artifacts
        uses: actions/upload-artifact@v3
        with:
          name: updated-app
          path: ${{ env.UPDATED_PATHS }}
