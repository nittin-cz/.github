name: Reusable workflwo for updating production version

on:
  workflow_call:
    # inputs:
    #   application:
    #     type: string
    #     required: true
    #   change:
    #       type: string
    #       required: true

jobs:
  Extract_change_type:
    runs-on: ubuntu-latest
    outputs:
      version_type: ${{ env.change_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract PR body
        id: extract_pr_body
        run: echo "${{ github.event.pull_request.body }}" > pr_body.txt

      - name: Print PR body
        run: cat pr_body.txt

      - name: Extract Change Type
        id: extracted_change_type
        run: |
          CHANGE_TYPE=$(grep -Eo '\[x\] (Major|Minor|Patch|No Version Change)' pr_body.txt | sed -E 's/\[x\] //')
          echo "${CHANGE_TYPE:-Patch}" > change_type.txt

      - name: Upload Change Type Artifact
        uses: actions/upload-artifact@v3
        with:
          name: change_type
          path: change_type.txt

  Get_new_production_version:
    needs: Extract_change_type
    if: ${{ needs.Extract_change_type.outputs.version_type != 'No Version Change' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Change Type Artifact
        uses: actions/download-artifact@v3
        with:
          name: change_type
          path: .

      - name: Read Change Type
        id: read_change_type
        run: |
          CHANGE_TYPE=$(cat change_type.txt)
          echo "change_type=${CHANGE_TYPE}" >> $GITHUB_ENV

      - name: Determine Increment Type
        id: determine_increment
        run: |
          case "${{ env.change_type }}" in
            Major)
              echo "increment=major" >> $GITHUB_ENV
              ;;
            Minor)
              echo "increment=minor" >> $GITHUB_ENV
              ;;
            Patch)
              echo "increment=patch" >> $GITHUB_ENV
              ;;
            *)
              echo "increment=patch" >> $GITHUB_ENV
              ;;
          esac

      - name: Get next version
        uses: reecetech/version-increment@2024.4.3
        id: version
        with:
          scheme: semver
          increment: ${{ env.increment }}

  Update_package_json:
    needs: Get_new_production_version
    runs-on: ubuntu-latest
    if: needs.Get_new_production_version.outputs.version != ''
    outputs:
      version: ${{ needs.Get_new_production_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Node.js Version from backend/package.json
        id: extract-node-version
        run: |
          node_version=$(jq -r '.engines.node' backend/package.json)
          echo "NODE_VERSION=$node_version" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update backend/package.json Version
        run: |
          jq ".version=\"${{ needs.Get_new_production_version.outputs.version }}\"" backend/package.json > backend/temp.json && mv backend/temp.json backend/package.json

      - name: Update frontend/package.json Version
        run: |
          jq ".version=\"${{ needs.Get_new_production_version.outputs.version }}\"" frontend/package.json > frontend/temp.json && mv frontend/temp.json frontend/package.json

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: "Changed application version in package.json to ${{ needs.Get_new_production_version.outputs.version }}"
          committer_name: GitHub Actions

  Release:
    needs: Update_package_json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ECHO realse the version
        run: |
          echo "we should be here ${{ needs.Update_package_json.outputs.version }}"
    
      # - name: Create a GitHub release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     tag: "${{ needs.Update_package_json.outputs.version }}"
      #     name: Release ${{ needs.Update_package_json.outputs.version }}
      #     body: "Changelog: ${{ steps.version.outputs.version }}"